{"remainingRequest":"C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\src\\components\\ThemePicker\\index.vue?vue&type=style&index=0&id=50c07b7a&lang=css&","dependencies":[{"path":"C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\src\\components\\ThemePicker\\index.vue","mtime":1665624703531},{"path":"C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\node_modules\\css-loader\\dist\\cjs.js","mtime":1662199387784},{"path":"C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1662199385560},{"path":"C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\node_modules\\postcss-loader\\src\\index.js","mtime":1662199384184},{"path":"C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662199364782},{"path":"C:\\Users\\cswnb\\Desktop\\团队实战2\\黑马mm\\新建文件夹\\blackDonkey\\node_modules\\vue-loader\\lib\\index.js","mtime":1662199385560}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudGhlbWUtcGlja2VyIC5lbC1jb2xvci1waWNrZXJfX3RyaWdnZXIgew0KICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOw0KfQ0KDQoudGhlbWUtcGlja2VyLWRyb3Bkb3duIC5lbC1jb2xvci1kcm9wZG93bl9fbGluay1idG4gew0KICBkaXNwbGF5OiBub25lOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAqJA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/ThemePicker","sourcesContent":["<template>\r\n  <el-color-picker\r\n    class=\"theme-picker\"\r\n    popper-class=\"theme-picker-dropdown\"\r\n    v-model=\"theme\"></el-color-picker>\r\n</template>\r\n\r\n<script>\r\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\r\nconst ORIGINAL_THEME = '#409EFF' // default color\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      chalk: '', // content of theme-chalk css\r\n      theme: ORIGINAL_THEME\r\n    }\r\n  },\r\n  watch: {\r\n    theme (val, oldVal) {\r\n      if (typeof val !== 'string') return\r\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\r\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\r\n      console.log(themeCluster, originalCluster)\r\n      const getHandler = (variable, id) => {\r\n        return () => {\r\n          const originalCluster = this.getThemeCluster(\r\n            ORIGINAL_THEME.replace('#', '')\r\n          )\r\n          const newStyle = this.updateStyle(\r\n            this[variable],\r\n            originalCluster,\r\n            themeCluster\r\n          )\r\n\r\n          let styleTag = document.getElementById(id)\r\n          if (!styleTag) {\r\n            styleTag = document.createElement('style')\r\n            styleTag.setAttribute('id', id)\r\n            document.head.appendChild(styleTag)\r\n          }\r\n          styleTag.innerText = newStyle\r\n        }\r\n      }\r\n\r\n      const chalkHandler = getHandler('chalk', 'chalk-style')\r\n\r\n      if (!this.chalk) {\r\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\r\n        this.getCSSString(url, chalkHandler, 'chalk')\r\n      } else {\r\n        chalkHandler()\r\n      }\r\n\r\n      const styles = [].slice\r\n        .call(document.querySelectorAll('style'))\r\n        .filter(style => {\r\n          const text = style.innerText\r\n          return (\r\n            new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\r\n          )\r\n        })\r\n      styles.forEach(style => {\r\n        const { innerText } = style\r\n        if (typeof innerText !== 'string') return\r\n        style.innerText = this.updateStyle(\r\n          innerText,\r\n          originalCluster,\r\n          themeCluster\r\n        )\r\n      })\r\n      this.$message({\r\n        message: '换肤成功',\r\n        type: 'success'\r\n      })\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    updateStyle (style, oldCluster, newCluster) {\r\n      let newStyle = style\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\r\n      })\r\n      return newStyle\r\n    },\r\n\r\n    getCSSString (url, callback, variable) {\r\n      const xhr = new XMLHttpRequest()\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === 4 && xhr.status === 200) {\r\n          this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\r\n          callback()\r\n        }\r\n      }\r\n      xhr.open('GET', url)\r\n      xhr.send()\r\n    },\r\n\r\n    getThemeCluster (theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        if (tint === 0) {\r\n          // when primary color is in its rgb space\r\n          return [red, green, blue].join(',')\r\n        } else {\r\n          red += Math.round(tint * (255 - red))\r\n          green += Math.round(tint * (255 - green))\r\n          blue += Math.round(tint * (255 - blue))\r\n\r\n          red = red.toString(16)\r\n          green = green.toString(16)\r\n          blue = blue.toString(16)\r\n\r\n          return `#${red}${green}${blue}`\r\n        }\r\n      }\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        red = Math.round((1 - shade) * red)\r\n        green = Math.round((1 - shade) * green)\r\n        blue = Math.round((1 - shade) * blue)\r\n\r\n        red = red.toString(16)\r\n        green = green.toString(16)\r\n        blue = blue.toString(16)\r\n\r\n        return `#${red}${green}${blue}`\r\n      }\r\n\r\n      const clusters = [theme]\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1))\r\n      return clusters\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.theme-picker .el-color-picker__trigger {\r\n  vertical-align: middle;\r\n}\r\n\r\n.theme-picker-dropdown .el-color-dropdown__link-btn {\r\n  display: none;\r\n}\r\n</style>\r\n"]}]}